// Generated by CoffeeScript 1.8.0
(function() {
  var ArithmeticForm, ArithmeticView, ExploreForm, ExploreView, MatrixForm, MatrixView, MetricsView, PairwiseForm, PairwiseView, Publisher, SemanticSpace, SemanticSpaceLoadForm, SemanticSpaceView, Status, StatusView, alertBox, apiRoot, apiUrls, arithGoId, arithInfoId, arithMetricId, arithNegativeInputId, arithNumberId, arithPositiveInputId, arithResultsId, arrayEqual, createModal, definedAt, distanceTable, docParser, exploreMetricId, exploreNumberId, exploreResultsId, exploreSingleGoId, exploreSingleInputId, genericModalId, init, initAvailabilityChecks, initTextAreaLoaders, label, labelAll, loadSemspaceChoiceId, loadSemspaceFormatId, loadSemspaceGoId, loadSemspaceModalBodyId, loadSemspaceModalId, loadSemspaceModalOpenId, loadSemspaceModalSearchId, loadingErrorModalId, loadingModalId, matrixGoId, matrixMetricId, matrixReflistBrowseId, matrixReflistId, matrixTargetSwitchId, matrixTargetlistBrowseId, matrixTargetlistClass, matrixTargetlistId, newLinesToBr, pairGoId, pairListId, pairMetricId, parseLines, parseLinesColons, showLoading, spaceModalDescId, spaceModalTitleId, statusBoxId, statusRefreshInterval, statusRefreshTimeout, statusSemspaceNameId, submitVForm, successBoxWords, textAreaPairs, updateOptions, warningBoxArith, warningBoxNaWords, withFileReader,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  apiRoot = function() {
    return window.snaut.apiPrefix;
  };

  apiUrls = {
    status: apiRoot() + "/status/",
    listSemspaces: apiRoot() + "/list-semspaces/",
    loadSemspace: apiRoot() + "/load-semspace/",
    similar: function(w1) {
      return apiRoot() + ("/similar/" + w1 + "/");
    },
    similarJson: apiRoot() + "/similar/",
    simMatrix: apiRoot() + "/similarity-matrix/",
    pairwise: apiRoot() + "/pairs/",
    arithmetic: apiRoot() + "/offset/",
    definedAt: apiRoot() + "/defined-at/"
  };

  statusRefreshInterval = 2000;

  statusRefreshTimeout = 200;

  loadingModalId = '#loading-modal';

  loadingErrorModalId = '#loading-error-modal';

  loadSemspaceModalBodyId = '#load-space-modal-desc';

  loadSemspaceModalId = '#load-semspace-modal';

  loadSemspaceModalSearchId = '#load-semspace-search-paths';

  loadSemspaceModalOpenId = '#load-semspace-modal-open';

  loadSemspaceChoiceId = '#load-semspace-choice';

  loadSemspaceFormatId = '#load-semspace-format';

  loadSemspaceGoId = '#load-semspace-go';

  statusSemspaceNameId = '#semspace-name';

  statusBoxId = '#status-box';

  spaceModalTitleId = '#space-modal-title';

  spaceModalDescId = '#space-modal-desc';

  exploreSingleInputId = '#explore-single-input';

  exploreSingleGoId = '#explore-single-go';

  exploreMetricId = '#explore-metric';

  exploreNumberId = '#explore-number';

  exploreResultsId = '#explore-results';

  matrixReflistId = '#matrix-reflist';

  matrixReflistBrowseId = '#matrix-reflist-browse';

  matrixTargetSwitchId = '#matrix-targetswitch';

  matrixTargetlistClass = '.matrix-targetlist';

  matrixTargetlistId = '#matrix-targetlist';

  matrixTargetlistBrowseId = '#matrix-targetlist-browse';

  matrixMetricId = '#matrix-metric';

  matrixGoId = '#matrix-go';

  arithPositiveInputId = '#arithmetic-positive-input';

  arithNegativeInputId = '#arithmetic-negative-input';

  arithNumberId = '#arithmetic-number';

  arithGoId = '#arithmetic-go';

  arithMetricId = '#arithmetic-metric';

  arithResultsId = '#arithmetic-results';

  arithInfoId = '#arithmetic-info';

  pairListId = '#pairwise-pairlist';

  pairMetricId = '#pairwise-metric';

  pairGoId = '#pairwise-go';

  genericModalId = "#generic-modal";

  Publisher = (function() {
    function Publisher() {
      this.notify = __bind(this.notify, this);
      this.subscribe = __bind(this.subscribe, this);
      this.subscribers = [];
    }

    Publisher.prototype.subscribe = function(id, e, callback) {
      return this.subscribers.push({
        id: id,
        event: e,
        callback: callback
      });
    };

    Publisher.prototype.notify = function(e, data) {
      var subsc, _i, _len, _ref, _results;
      if (data == null) {
        data = {};
      }
      _ref = this.subscribers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subsc = _ref[_i];
        if (subsc.event === e) {
          _results.push(subsc.callback(data, e));
        }
      }
      return _results;
    };

    return Publisher;

  })();

  Status = (function(_super) {
    __extends(Status, _super);

    Status.prototype.status = null;

    function Status() {
      this.notifyStatusAborted = __bind(this.notifyStatusAborted, this);
      this.notifyStatusUpdated = __bind(this.notifyStatusUpdated, this);
      this.update = __bind(this.update, this);
      Status.__super__.constructor.call(this);
    }

    Status.prototype.update = function() {
      return this.fetch().done((function(_this) {
        return function(data) {
          _this.status = data;
          return _this.notifyStatusUpdated(data);
        };
      })(this)).fail((function(_this) {
        return function(jqXHR, text) {
          return _this.notifyStatusAborted();
        };
      })(this));
    };

    Status.prototype.fetch = function() {
      return $.ajax(apiUrls.status, {
        dataType: 'json',
        timeout: statusRefreshTimeout
      });
    };

    Status.prototype.notifyStatusUpdated = function(status) {
      return this.notify('update', status);
    };

    Status.prototype.notifyStatusAborted = function() {
      return this.notify('abort');
    };

    return Status;

  })(Publisher);

  SemanticSpace = (function(_super) {
    __extends(SemanticSpace, _super);

    function SemanticSpace() {
      this.arithmetic = __bind(this.arithmetic, this);
      this.pairwise = __bind(this.pairwise, this);
      this.similarityMatrix = __bind(this.similarityMatrix, this);
      this.explore = __bind(this.explore, this);
      this.load = __bind(this.load, this);
      this.availableSpaces = __bind(this.availableSpaces, this);
      this.loadQuery = __bind(this.loadQuery, this);
      this.statusUpdate = __bind(this.statusUpdate, this);
      SemanticSpace.__super__.constructor.call(this);
    }

    SemanticSpace.prototype.statusUpdate = function(status) {
      this.notify('status-update', status);
      if (!status.semspaceLoaded) {
        return this.loadQuery();
      }
    };

    SemanticSpace.prototype.loadQuery = function() {
      if (!$(loadSemspaceModalId).hasClass('in')) {
        return this.availableSpaces().done((function(_this) {
          return function(available) {
            return _this.notify('space-load', available);
          };
        })(this));
      }
    };

    SemanticSpace.prototype.availableSpaces = function() {
      return $.get(apiUrls.listSemspaces);
    };

    SemanticSpace.prototype.load = function(data) {
      var jsonData;
      this.notify('space-loading', data);
      jsonData = JSON.stringify(data);
      return $.ajax(apiUrls.loadSemspace, {
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        data: jsonData
      }).done((function(_this) {
        return function() {
          return _this.notify('new-space-loaded');
        };
      })(this)).fail((function(_this) {
        return function() {
          return _this.notify('space-load-error');
        };
      })(this));
    };

    SemanticSpace.prototype.explore = function(data) {
      var jsonData;
      this.notify('explore-working', data);
      jsonData = JSON.stringify(data);
      return $.ajax(apiUrls.similarJson, {
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        data: jsonData
      }).done((function(_this) {
        return function(data) {
          return _this.notify('explore-update', data);
        };
      })(this));
    };

    SemanticSpace.prototype.similarityMatrix = function(data) {
      var action, dataJson;
      this.notify('matrix-working');
      action = apiUrls.simMatrix;
      dataJson = JSON.stringify(data);
      return submitVForm(action, dataJson);
    };

    SemanticSpace.prototype.pairwise = function(data) {
      var action, dataJson;
      this.notify('pairwise-working');
      action = apiUrls.pairwise;
      dataJson = JSON.stringify(data);
      return submitVForm(action, dataJson);
    };

    SemanticSpace.prototype.arithmetic = function(data) {
      var jsonData;
      this.notify('arithmetic-working', data);
      jsonData = JSON.stringify(data);
      return $.ajax(apiUrls.arithmetic, {
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        data: jsonData
      }).done((function(_this) {
        return function(data) {
          return _this.notify('arithmetic-update', data);
        };
      })(this));
    };

    return SemanticSpace;

  })(Publisher);

  SemanticSpaceLoadForm = (function(_super) {
    __extends(SemanticSpaceLoadForm, _super);

    function SemanticSpaceLoadForm() {
      this.go = __bind(this.go, this);
      this.collect = __bind(this.collect, this);
      return SemanticSpaceLoadForm.__super__.constructor.apply(this, arguments);
    }

    SemanticSpaceLoadForm.prototype.collect = function() {
      return {
        semspacePath: $(loadSemspaceChoiceId).val(),
        semspaceFormat: $(loadSemspaceFormatId).val()
      };
    };

    SemanticSpaceLoadForm.prototype.go = function() {
      var data;
      data = this.collect();
      return this.notify('space-form-go', data);
    };

    return SemanticSpaceLoadForm;

  })(Publisher);

  ExploreForm = (function(_super) {
    __extends(ExploreForm, _super);

    function ExploreForm() {
      this.go = __bind(this.go, this);
      return ExploreForm.__super__.constructor.apply(this, arguments);
    }

    ExploreForm.prototype.collect = function() {
      var docs, metric, number, words;
      docs = $(exploreSingleInputId).val().split("\n");
      words = docs.map(docParser).filter(function(e) {
        return e.length > 0;
      });
      metric = $(exploreMetricId).val();
      number = parseInt($(exploreNumberId).val());
      return {
        words1: words,
        metric: metric,
        n: number
      };
    };

    ExploreForm.prototype.go = function() {
      var data;
      data = this.collect();
      if (data.words1.length > 0) {
        return this.notify('explore-form-go', data);
      }
    };

    return ExploreForm;

  })(Publisher);

  MatrixForm = (function(_super) {
    __extends(MatrixForm, _super);

    function MatrixForm() {
      this.go = __bind(this.go, this);
      return MatrixForm.__super__.constructor.apply(this, arguments);
    }

    MatrixForm.prototype.collect = function() {
      var data, targetSwitch, words1;
      words1 = parseLines($(matrixReflistId).val());
      data = {
        metric: $(matrixMetricId).val(),
        words1: words1
      };
      targetSwitch = $(matrixTargetSwitchId).val();
      if (targetSwitch === 'list') {
        data['words2'] = parseLines($(matrixTargetlistId).val());
      } else if (targetSwitch === 'same') {
        data['words2'] = words1;
      }
      return data;
    };

    MatrixForm.prototype.go = function() {
      var data;
      data = this.collect();
      return this.notify('matrix-form-go', data);
    };

    return MatrixForm;

  })(Publisher);

  PairwiseForm = (function(_super) {
    __extends(PairwiseForm, _super);

    function PairwiseForm() {
      this.go = __bind(this.go, this);
      return PairwiseForm.__super__.constructor.apply(this, arguments);
    }

    PairwiseForm.prototype.collect = function() {
      return {
        metric: $(pairMetricId).val(),
        wordPairs: textAreaPairs(pairListId)
      };
    };

    PairwiseForm.prototype.go = function() {
      var data;
      data = this.collect();
      return this.notify('pairwise-form-go', data);
    };

    return PairwiseForm;

  })(Publisher);

  ArithmeticForm = (function(_super) {
    __extends(ArithmeticForm, _super);

    function ArithmeticForm() {
      this.go = __bind(this.go, this);
      return ArithmeticForm.__super__.constructor.apply(this, arguments);
    }

    ArithmeticForm.prototype.collect = function() {
      var metric, negDocs, negWords, number, posDocs, posWords;
      posDocs = $(arithPositiveInputId).val().split("\n");
      negDocs = $(arithNegativeInputId).val().split("\n");
      number = parseInt($(arithNumberId).val());
      posWords = posDocs.map(docParser).filter(function(e) {
        return e.length > 0;
      });
      negWords = negDocs.map(docParser).filter(function(e) {
        return e.length > 0;
      });
      metric = $(arithMetricId).val();
      return {
        positive: posWords,
        negative: negWords,
        metric: metric,
        n: number
      };
    };

    ArithmeticForm.prototype.go = function() {
      var data;
      data = this.collect();
      $(arithInfoId).html('');
      return this.notify('arithmetic-form-go', data);
    };

    return ArithmeticForm;

  })(Publisher);

  StatusView = (function() {
    function StatusView() {
      this.aborted = __bind(this.aborted, this);
      this.update = __bind(this.update, this);
    }

    StatusView.prototype.update = function(status) {
      this.showStatusReady();
      if (status.allowChange) {
        return $('#load-semspace-modal-open').show();
      } else {
        return $('#load-semspace-modal-open').hide();
      }
    };

    StatusView.prototype.aborted = function() {
      return this.showStatusWorking();
    };

    StatusView.prototype.showStatusReady = function() {
      return $('#server-status').html('<span class="glyphicon glyphicon-star"></span> Server ready');
    };

    StatusView.prototype.showStatusWorking = function() {
      return $('#server-status').html('<span class="glyphicon glyphicon-cog"></span> Server working');
    };

    return StatusView;

  })();

  SemanticSpaceView = (function() {
    function SemanticSpaceView() {
      this.noSpace = __bind(this.noSpace, this);
      this.update = __bind(this.update, this);
    }

    SemanticSpaceView.prototype.update = function(status) {
      var desc, title;
      if (status.semspaceLoaded) {
        title = status.semspaceTitle;
        desc = status.semspaceDesc;
        this.showSemanticSpace(title);
        return this.setSemanticSpaceModal(title, desc);
      }
    };

    SemanticSpaceView.prototype.showSemanticSpace = function(title) {
      return $(statusSemspaceNameId).text(title);
    };

    SemanticSpaceView.prototype.showSpaceLoading = function(spaceData) {
      $(loadSemspaceModalId).modal('hide');
      return $(loadingModalId).modal('show');
    };

    SemanticSpaceView.prototype.hideSpaceLoading = function() {
      return $(loadingModalId).modal('hide');
    };

    SemanticSpaceView.prototype.spaceLoadingError = function() {
      $(loadingModalId).modal('hide');
      return $(loadingErrorModalId).modal('show');
    };

    SemanticSpaceView.prototype.setSemanticSpaceModal = function(title, desc) {
      $(spaceModalTitleId).text(title);
      return $(spaceModalDescId).html(newLinesToBr(desc));
    };

    SemanticSpaceView.prototype.noSpace = function(data) {
      updateOptions(loadSemspaceChoiceId, data.availableSpaces);
      console.log('nn');
      if (data.paths) {
        console.log('nna');
        $(loadSemspaceModalSearchId).html('Searched paths: ' + data.paths);
      }
      return $(loadSemspaceModalId).modal('show');
    };

    return SemanticSpaceView;

  })();

  ExploreView = (function() {
    function ExploreView() {
      this.update = __bind(this.update, this);
    }

    ExploreView.prototype.update = function(data) {
      var col, naWords, nns, notDefined, table, warningDiv, word, _ref, _results;
      $(exploreResultsId).html('');
      console.log(data);
      notDefined = data.notDefined.words1;
      if (notDefined.length > 0) {
        naWords = labelAll(notDefined);
        warningDiv = $('<div>', {
          "class": 'col-md-12'
        });
        $(warningDiv).append(warningBoxArith(naWords));
        $(exploreResultsId).append(warningDiv);
      }
      _ref = data['similarities'];
      _results = [];
      for (word in _ref) {
        nns = _ref[word];
        table = distanceTable(word, nns);
        col = $('<div>', {
          "class": 'col-md-3',
          html: table
        });
        _results.push($(exploreResultsId).append(col));
      }
      return _results;
    };

    ExploreView.prototype.showWorking = function() {
      return $(exploreResultsId).html('<div class="text-center"><img src="/static/images/preloader.gif"/></div>');
    };

    return ExploreView;

  })();

  MatrixView = (function() {
    function MatrixView() {}

    return MatrixView;

  })();

  PairwiseView = (function() {
    function PairwiseView() {}

    return PairwiseView;

  })();

  ArithmeticView = (function() {
    function ArithmeticView() {
      this.update = __bind(this.update, this);
    }

    ArithmeticView.prototype.update = function(data) {
      var naWords, notDefined, table, warningDiv;
      console.log(data);
      $(arithResultsId).html('');
      notDefined = data.notDefined.positive.concat(data.notDefined.negative);
      if (notDefined.length > 0) {
        naWords = labelAll(notDefined);
        warningDiv = $('<div>', {
          "class": 'col-md-12'
        });
        $(warningDiv).append(warningBoxArith(naWords));
        $(arithResultsId).append(warningDiv);
      }
      if (data.closest) {
        table = distanceTable('', data.closest);
        return $(arithResultsId).append($('<div>', {
          "class": 'col-md-3',
          html: table
        }));
      }
    };

    return ArithmeticView;

  })();

  MetricsView = (function() {
    function MetricsView() {
      this.update = __bind(this.update, this);
    }

    MetricsView.prototype.update = function(data) {
      if (!this.metrics || !arrayEqual(this.metrics, data.allowedMetrics)) {
        this.metrics = data.allowedMetrics;
        return updateOptions('select.metrics-options', this.metrics);
      }
    };

    return MetricsView;

  })();

  updateOptions = function(obj, opts) {
    var nr, opt, option;
    $(obj).empty();
    for (nr in opts) {
      opt = opts[nr];
      option = "<option value=\"" + opt + "\">" + opt + "</option>";
      $(obj).append(option);
    }
    return $(obj).selectpicker('refresh');
  };

  init = function() {
    var arithForm, arithView, exploreForm, exploreView, matrixForm, matrixTargetAreaStatus, metricsView, pairwiseForm, semspace, semspaceLoadForm, semspaceView, status, statusRefresh, statusView;
    status = new Status;
    statusRefresh = setInterval(status.update, statusRefreshInterval);
    statusView = new StatusView;
    status.subscribe('statusViewUpdate', 'update', statusView.update);
    status.subscribe('statusViewAbort', 'abort', statusView.aborted);
    metricsView = new MetricsView;
    status.subscribe('statusViewUpdate', 'update', metricsView.update);
    semspace = new SemanticSpace;
    status.subscribe('semspace', 'update', semspace.statusUpdate);
    semspaceLoadForm = new SemanticSpaceLoadForm;
    $(loadSemspaceGoId).click(semspaceLoadForm.go);
    semspaceLoadForm.subscribe('semspaceLoadGo', 'space-form-go', semspace.load);
    $(loadSemspaceModalOpenId).click(semspace.loadQuery);
    semspaceView = new SemanticSpaceView;
    semspace.subscribe('semspaceViewUpdate', 'status-update', semspaceView.update);
    semspace.subscribe('semspaceViewNoSpace', 'space-load', semspaceView.noSpace);
    semspace.subscribe('semspaceViewNoSpace', 'space-loading', semspaceView.showSpaceLoading);
    semspace.subscribe('semspaceViewSpaceLoaded', 'new-space-loaded', semspaceView.hideSpaceLoading);
    semspace.subscribe('semspaceViewSpaceLoadingError', 'space-load-error', semspaceView.spaceLoadingError);
    exploreForm = new ExploreForm;
    $(exploreSingleGoId).click(exploreForm.go);
    exploreForm.subscribe('semspaceExploreGo', 'explore-form-go', semspace.explore);
    exploreView = new ExploreView;
    semspace.subscribe('exploreViewUpdate', 'explore-update', exploreView.update);
    semspace.subscribe('exploreViewWorking', 'explore-working', exploreView.showWorking);
    matrixTargetAreaStatus = function() {
      if ($(matrixTargetSwitchId).val() === 'list') {
        $(matrixTargetlistClass).attr('disabled', false);
        return $(matrixTargetlistClass).attr('', false);
      } else {
        return $(matrixTargetlistClass).attr('disabled', true);
      }
    };
    $(matrixTargetSwitchId).change(matrixTargetAreaStatus);
    matrixTargetAreaStatus();
    matrixForm = new MatrixForm;
    $(matrixGoId).click(matrixForm.go);
    matrixForm.subscribe('semspaceMatrixGo', 'matrix-form-go', semspace.similarityMatrix);
    pairwiseForm = new PairwiseForm;
    $(pairGoId).click(pairwiseForm.go);
    pairwiseForm.subscribe('semspacePairwiseGo', 'pairwise-form-go', semspace.pairwise);
    arithForm = new ArithmeticForm;
    $(arithGoId).click(arithForm.go);
    arithForm.subscribe('semspaceArithGo', 'arithmetic-form-go', semspace.arithmetic);
    arithView = new ArithmeticView;
    semspace.subscribe('arithViewUpdate', 'arithmetic-update', arithView.update);
    initTextAreaLoaders();
    initAvailabilityChecks();
    return status.update();
  };

  initTextAreaLoaders = function() {
    return $('.textarea-load').bind('change', function(event) {
      var readF, targetAreaId;
      targetAreaId = $(this).data('target');
      readF = withFileReader(function(fn, ft, content) {
        return $(targetAreaId).val(content);
      });
      return readF(event);
    });
  };

  initAvailabilityChecks = function() {
    return $('.availability-check').bind('click', function(event) {
      var sourceAreaId, targetId, text, words;
      sourceAreaId = $(this).data('source');
      targetId = $(this).data('target');
      text = $(sourceAreaId).val();
      words = parseLinesColons(text);
      console.log(words);
      return definedAt(words).done(function(data) {
        var nas, target;
        target = $(targetId);
        target.empty();
        if (data.notAvailable.length !== 0) {
          nas = labelAll(data.notAvailable);
          return target.append(warningBoxNaWords(nas));
        } else {
          return target.append(successBoxWords);
        }
      });
    });
  };

  definedAt = function(words) {
    var dataJson;
    dataJson = JSON.stringify({
      'words': words
    });
    return $.ajax(apiUrls.definedAt, {
      type: 'POST',
      contentType: "application/json; charset=utf-8",
      data: dataJson
    });
  };

  alertBox = function(alertClass, content) {
    return $('<div>', {
      role: 'alert',
      "class": "alert " + alertClass,
      html: content
    });
  };

  warningBoxArith = function(words) {
    var alertText;
    alertText = "<b>Warning!</b>\nThese words/documents are not defined in the loaded space:\n<em><b>" + (words.join(", ")) + "</b></em/>. They are ignored in calculations!";
    return alertBox('alert-warning', alertText);
  };

  warningBoxNaWords = function(words) {
    var alertText;
    alertText = "<b>Warning!</b>\nThese words/documents are not defined in the loaded space:\n<em><b>" + (words.join(", ")) + "</b></em>";
    return alertBox('alert-warning', alertText);
  };

  successBoxWords = function() {
    return alertBox('alert-success', '<b>Excellent!</b> All these words are defined in the space.');
  };

  showLoading = function(targetId) {
    return $(targetId).html('<div class="text-center"><img src="/static/images/preloader.gif"/></div>');
  };

  distanceTable = function(refWord, data) {
    var nr, roundedDistance, row, wordsList;
    wordsList = $('<table class="table table-condensed table-striped">');
    wordsList.append("<tr><th>" + refWord + "</th><th>Distance</th></tr>");
    for (nr in data) {
      row = data[nr];
      roundedDistance = Math.round(row[1] * 100, 3) / 100;
      wordsList.append("<tr><td>" + row[0] + "</td><td>" + roundedDistance + "</td></tr>");
    }
    return wordsList;
  };

  submitVForm = function(action, data, name) {
    var vForm, vFormData;
    if (name == null) {
      name = 'data';
    }
    vForm = $('<form>', {
      method: 'post',
      action: action,
      hidden: true
    });
    vFormData = $('<input>', {
      name: name
    });
    vFormData.val(data);
    vForm.append(vFormData);
    vForm.appendTo(document.body);
    vForm.submit();
    return vForm.remove();
  };

  createModal = function(header, body, footer, close) {
    var closeButton, modal, modalBody, modalFooter, modalHeader;
    if (header == null) {
      header = '';
    }
    if (body == null) {
      body = '';
    }
    if (footer == null) {
      footer = '';
    }
    if (close == null) {
      close = false;
    }
    modal = $(genericModalId).clone();
    modalHeader = modal.find('.modal-header').empty();
    modalBody = modal.find('.modal-body').empty();
    modalFooter = modal.find('.modal-footer').empty();
    if (close) {
      closeButton = "<button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>";
      modalHeader.append(closeButton);
    }
    modalHeader.append(header);
    modalBody.append(body);
    modalFooter.append(footer);
    return modal;
  };

  label = function(doc) {
    return doc.join(' ');
  };

  labelAll = function(docs) {
    return docs.map(label);
  };

  parseLines = function(dataStr) {
    var docs;
    docs = dataStr.split(/(?:\r\n|\r|\n)/);
    docs = docs.map(docParser);
    return docs.filter(function(d) {
      return d.length > 0;
    });
  };

  parseLinesColons = function(dataStr) {
    var docs;
    docs = dataStr.split(/(?:\r\n|\r|\n|:)/);
    return docs.map(docParser);
  };

  textAreaPairs = function(areaId) {
    var lines;
    lines = $(areaId).val().split(/(?:\r\n|\r|\n)/);
    lines = lines.map(function(l) {
      return l.split(':');
    });
    lines = lines.filter(function(p) {
      return p && p.length === 2;
    });
    return lines.map(function(l) {
      return l.map(docParser);
    });
  };

  docParser = function(doc) {
    var elems, stripped;
    elems = doc.split(/[\n ]+/);
    stripped = elems.map(function(e) {
      return e.strip();
    });
    return stripped.filter(function(e) {
      return e !== "";
    });
  };

  newLinesToBr = function(text) {
    return text.replace(/(?:\r\n|\r|\n)/g, '<br />');
  };

  withFileReader = function(func) {
    return function(event) {
      var file, reader;
      if (window.File && window.FileReader && window.FileList && window.Blob) {
        file = event.target.files[0];
        if (file) {
          reader = new FileReader();
          reader.onload = function(event) {
            var contents;
            contents = event.target.result;
            return func(file.name, file.type, contents);
          };
          return reader.readAsText(file);
        } else {
          return alert("Failed to load file!");
        }
      } else {
        return alert('The File APIs are not fully supported by your browser.');
      }
    };
  };

  arrayEqual = function(a, b) {
    return a.length === b.length && a.every(function(elem, i) {
      return elem === b[i];
    });
  };

  String.prototype.strip = function() {
    if (String.prototype.trim != null) {
      return this.trim();
    } else {
      return this.replace(/^\s+|\s+$/g, "");
    }
  };

  String.prototype.lstrip = function() {
    return this.replace(/^\s+/g, "");
  };

  String.prototype.rstrip = function() {
    return this.replace(/\s+$/g, "");
  };

  $(document).ready(function() {
    init();
    return console.log('start');
  });

}).call(this);
